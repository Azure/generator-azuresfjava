apply plugin: 'java'
apply plugin: 'eclipse'

sourceSets {
  main {
     java.srcDirs = ['src']
      resources {
       srcDirs = ['src']
     }
   }
}

clean.doFirst {
    delete "${projectDir}/lib"
    delete "${projectDir}/out"
    delete "${projectDir}/../<%= appPackage %>/<%= servicePackage %>/Code/lib"
    delete "${projectDir}/../<%= appPackage %>/<%= servicePackage %>/Code/<%= serviceJarName %>.jar"
}

repositories {
    mavenCentral()
}

configurations {
    azuresf
}

dependencies {
    compile project(':<%= interfaceProjName %>')
    azuresf ('com.microsoft.servicefabric:sf-actors:1.0.1')
    compile fileTree(dir: 'lib', include: '*.jar')
}

task explodeDeps(type: Copy, dependsOn:configurations.azuresf) { task ->
    configurations.azuresf.filter { it.toString().contains("native") }.each{
        from zipTree(it)
    }
    configurations.azuresf.filter { !it.toString().contains("native") }.each {
        from it
    }
    into "lib"
    include "lib*.so", "*.jar"
}

compileJava.dependsOn(explodeDeps)

jar {
    manifest {
        def mpath = configurations.compile.collect {'lib/'+it.getName()}.join (' ')
        mpath = mpath + ' ' + configurations.azuresf.collect {'lib/'+it.getName()}.join (' ')
    attributes(
                'Main-Class': '<%= serviceMainClass %>',
                "Class-Path": mpath)
    baseName "<%= serviceJarName %>"
    destinationDir = file('../<%= appPackage %>/<%= servicePackage %>/Code')}
 }

 task copyDeps{
     doLast{
        copy {
            from("lib/")
            into("../<%= appPackage %>/<%= servicePackage %>/Code/lib")
            include('*')
        }
        copy {
            from("../<%= interfaceProjName %>/out/lib")
            into("../<%= appPackage %>/<%= servicePackage %>/Code/lib")
            include('*.jar')
        }
     }
}


defaultTasks 'clean', 'jar', 'copyDeps'
